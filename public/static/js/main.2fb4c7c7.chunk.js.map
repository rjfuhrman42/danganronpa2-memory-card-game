{"version":3,"sources":["assets/crt_green_mask.png","assets/akane.png","assets/byakuya.png","assets/chiaki.png","assets/fuyuhiko.png","assets/gundham.png","assets/hajime.png","assets/hiyoko.png","assets/ibuki.png","assets/mahiru.png","assets/nekomaru.png","assets/mikan.png","assets/nagito.png","assets/peko.png","assets/soda.png","assets/sonya.png","assets/teruteru.png","components/CardFront.js","components/CardBack.js","components/Card.js","images.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardFront","character","className","style","backgroundImage","CardBack","props","Card","front","handleClick","flipped","id","class_name","matched","onClick","characters","akane","byakuya","chiaki","fuyuhiko","gundham","hajime","hiyoko","ibuki","mahiru","nekomaru","mikan","nagito","peko","soda","sonya","teruteru","Cards","useState","cards","setCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","turns","setTurns","playing","setPlaying","time","setTime","wins","setWins","length","includes","console","log","setupGame","array","images","arr","x","temp","i","randNumber","Math","floor","random","shuffle","useEffect","setTimeout","firstImage","secondImage","prev","currentSeconds","endMinutes","endSeconds","map","image","index","App","class","src","crt_green_mask","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2fb4c7c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/crt_green_mask.2f0d3eb1.png\";","module.exports = __webpack_public_path__ + \"static/media/akane.1c0a5cea.png\";","module.exports = __webpack_public_path__ + \"static/media/byakuya.0a13b1f4.png\";","module.exports = __webpack_public_path__ + \"static/media/chiaki.e1a01aba.png\";","module.exports = __webpack_public_path__ + \"static/media/fuyuhiko.ba769d22.png\";","module.exports = __webpack_public_path__ + \"static/media/gundham.c2241e3f.png\";","module.exports = __webpack_public_path__ + \"static/media/hajime.cbdfead8.png\";","module.exports = __webpack_public_path__ + \"static/media/hiyoko.1e0405c8.png\";","module.exports = __webpack_public_path__ + \"static/media/ibuki.92643a50.png\";","module.exports = __webpack_public_path__ + \"static/media/mahiru.c626e844.png\";","module.exports = __webpack_public_path__ + \"static/media/nekomaru.43a912fb.png\";","module.exports = __webpack_public_path__ + \"static/media/mikan.32506a4f.png\";","module.exports = __webpack_public_path__ + \"static/media/nagito.39df86a3.png\";","module.exports = __webpack_public_path__ + \"static/media/peko.eb4bbb20.png\";","module.exports = __webpack_public_path__ + \"static/media/soda.347a231d.png\";","module.exports = __webpack_public_path__ + \"static/media/sonya.f40cae0b.png\";","module.exports = __webpack_public_path__ + \"static/media/teruteru.4c751a4d.png\";","import React from \"react\"\r\n\r\nfunction CardFront({character}) {\r\n    return (\r\n        <div className=\"front\" style={{backgroundImage: `url(${character})`}}>\r\n            {/* <img src={character} className=\"card-front-image\"></img> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardFront","import React from \"react\"\r\n\r\nfunction CardBack (props)\r\n{\r\n    return (\r\n        <div className=\"back\">\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardBack","import React, {useState} from \"react\"\r\nimport CardFront from \"./CardFront\"\r\nimport CardBack from \"./CardBack\"\r\n\r\nfunction Card({front, handleClick, flipped, id, matched}) {\r\n    \r\n    var class_name = matched ? 'card matched' : \r\n                     flipped ? 'card flipped' : 'card'\r\n\r\n    return (\r\n        <div className={class_name} onClick={() => handleClick(id)} id={id}>\r\n            <div className=\"content\">\r\n                <CardBack />\r\n                <CardFront character={front}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import akane from \"./assets/akane.png\"\r\nimport byakuya from \"./assets/byakuya.png\"\r\nimport chiaki from \"./assets/chiaki.png\"\r\nimport fuyuhiko from \"./assets/fuyuhiko.png\"\r\nimport gundham from \"./assets/gundham.png\"\r\nimport hajime from \"./assets/hajime.png\"\r\nimport hiyoko from \"./assets/hiyoko.png\"\r\nimport ibuki from \"./assets/ibuki.png\"\r\nimport mahiru from \"./assets/mahiru.png\"\r\nimport nekomaru from \"./assets/nekomaru.png\"\r\nimport mikan from \"./assets/mikan.png\"\r\nimport nagito from \"./assets/nagito.png\"\r\nimport peko from \"./assets/peko.png\"\r\nimport soda from \"./assets/soda.png\"\r\nimport sonya from \"./assets/sonya.png\"\r\nimport teruteru from \"./assets/teruteru.png\"\r\n\r\n\r\nconst characters = [\r\n    akane,\r\n    byakuya,\r\n    chiaki,\r\n    fuyuhiko,\r\n    gundham,\r\n    hajime,\r\n    hiyoko,\r\n    ibuki,\r\n    mahiru,\r\n    nekomaru,\r\n    mikan,\r\n    nagito,\r\n    peko,\r\n    soda,\r\n    sonya,\r\n    teruteru\r\n]\r\n\r\nexport default characters","import React, { useState, useEffect } from \"react\"\r\nimport Card from \"./Card\"\r\nimport images from \"../images\"\r\n\r\nfunction Cards () {\r\n    const STARTING_TIME = 2\r\n    const [cards, setCards] = useState([])\r\n    const [flippedCards, setFlippedCards] = useState([])\r\n    const [matchedCards, setMatchedCards] = useState([])\r\n    const [turns, setTurns] = useState(0)\r\n    const [playing, setPlaying] = useState(false)\r\n    const [time, setTime] = useState(STARTING_TIME)\r\n    const [wins, setWins] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setupGame()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(flippedCards.length === 2) {\r\n            setTimeout(() => {\r\n                let firstImage = cards[flippedCards[0]] \r\n                let secondImage = cards[flippedCards[1]]\r\n\r\n                setTurns(prev => prev + 1)\r\n\r\n                if(firstImage === secondImage) {\r\n                    setMatchedCards([...matchedCards, flippedCards[0], flippedCards[1]])\r\n                    setFlippedCards([])\r\n                }\r\n                else {\r\n                    setFlippedCards([])\r\n                }\r\n            }, 500)\r\n        }\r\n    }, [flippedCards])\r\n\r\n    useEffect(() => {\r\n\r\n        if(matchedCards.length === images.length * 2) \r\n        {\r\n            setPlaying(false)\r\n            setWins(prev => prev + 1)\r\n        }\r\n\r\n    }, [matchedCards])\r\n\r\n    useEffect(() => {\r\n        if(playing && time > 0) \r\n        {\r\n            setTimeout(() => setTime(prev => prev - 1), 1000)\r\n        }\r\n        else if (time === 0)\r\n        {\r\n            setPlaying(false)\r\n        }\r\n    }, [time, playing])\r\n\r\n    function handleClick(id) {\r\n\r\n        if(!playing) {\r\n            setPlaying(true)\r\n        }\r\n        // if less than two cards flipped, this card is not currently flipped, and this card has not already been successfully matched\r\n        if(flippedCards.length < 2 && !flippedCards.includes(id) && !matchedCards.includes(id))  \r\n        {\r\n            console.log(matchedCards)\r\n            setFlippedCards([...flippedCards, id])\r\n        }\r\n        else return\r\n    }\r\n\r\n    function shuffle(arr) {\r\n        let x, temp = arr\r\n\r\n        for(let i = arr.length - 1; i > 0; i--)\r\n        {\r\n            const randNumber = Math.floor(Math.random() * (i + 1))  // Fisher-Yates\r\n            x = temp[i]\r\n            temp[i] = temp[randNumber]\r\n            temp[randNumber] = x\r\n        }\r\n        \r\n        return temp\r\n    }\r\n\r\n    function setupGame() {\r\n        let array = [...images, ...images]                           \r\n\r\n        array = shuffle(array)\r\n\r\n        setCards(array)                                             // Reset the game\r\n        setMatchedCards([])\r\n        setFlippedCards([])          \r\n        setTurns(0)\r\n        setTime(STARTING_TIME)\r\n    }\r\n\r\n    function winGame() {\r\n        let matches = []\r\n        cards.forEach((card, index) => matches.push(index))\r\n        setMatchedCards(matches)\r\n    }\r\n\r\n    let currentSeconds = time % 60\r\n    currentSeconds = currentSeconds > 9 ? currentSeconds : `0${currentSeconds}`\r\n    let endMinutes = Math.floor((STARTING_TIME - time) / 60)                    // Formatting for the timer (90 seconds => 1:30...)\r\n    let endSeconds = Math.floor((STARTING_TIME - time) % 60)\r\n\r\n    if(time > 0 && matchedCards.length < images.length * 2)\r\n    return (\r\n        <div className={'cards-grid'}>\r\n            {console.log(matchedCards.length, images.length*2)}\r\n           { cards.map((image, index) => (\r\n                <Card front={image} \r\n                      flipped={flippedCards.includes(index)}\r\n                      handleClick={handleClick}\r\n                      matched={matchedCards.includes(index)}\r\n                      id={index}\r\n                />\r\n                )\r\n            )}\r\n            <div className=\"turns\">TURNS:{turns}</div>\r\n            <div className=\"timer\">{playing ? `TIME: ${Math.floor(time / 60)}:${currentSeconds}` : <div className=\"loading\">CLICK A CARD TO START</div>}</div> \r\n            <div className=\"wins\">WINS: {wins}</div>\r\n        </div>\r\n    )\r\n    else return (\r\n        <div className=\"game-over-display\">\r\n            <h1>{matchedCards.length === images.length * 2 ? 'YOU WIN!' : 'TIMES UP!'}</h1>\r\n            <h1>TURNS: {turns}</h1>\r\n            <h1>TIME: {endMinutes}:{endSeconds > 9 ? `${endSeconds}` : `0${endSeconds}` }</h1>\r\n            <h1>WINS: {wins}</h1>\r\n            <button className=\"play-again-button\" onClick={setupGame}><h1>PLAY AGAIN?</h1></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards","import React from 'react';\nimport crt_green_mask from \"./assets/crt_green_mask.png\"\nimport './index.css';\n\nimport Cards from \"./components/Cards\"\n\nfunction App() {\n  return (\n    <div className=\"App crt\">\n       <img class=\"screen-frame\" src={crt_green_mask}></img>\n      <Cards />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}